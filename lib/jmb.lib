#!/bin/bash

########################################################################
# FONCTIONS
########################################################################

########################################################################
# Réponses HTTP

# Réponse HTTP "OK", pas de paramètre
# Envoyer le contenu de ${JMB_CGI_TMP}/http_${tsn}.message
function http_200 {

echo "Status: 200 OK" > ${JMB_CGI_TMP}/http_${tsn}.header
if [ "${setcookie}" = "1" ] ; then
	echo "Set-Cookie: viajmb=1" >> ${JMB_CGI_TMP}/http_${tsn}.header
fi
echo "Content-Type: text/html" >> ${JMB_CGI_TMP}/http_${tsn}.header

http_send

}

# Réponse HTTP "Redirect temporary", URL de redirection en argument
function http_302 {

echo "Status: 302 OK" > ${JMB_CGI_TMP}/http_${tsn}.header
echo "Content-Type: text/html" >> ${JMB_CGI_TMP}/http_${tsn}.header
echo "Location: ${1}" >> ${JMB_CGI_TMP}/http_${tsn}.header

http_send

}

# Réponse HTTP "Forbidden" retourne les arguments en HTML, redirection
# au bout de ${JMB_SLEEP_REDIRECT} secondes vers ${url_redirect}
# Envoyer le contenu de ${JMB_CGI_TMP}/http_${tsn}.header
function http_403 {

echo "Status: 403 Forbidden" > ${JMB_CGI_TMP}/http_${tsn}.header
echo "Content-Type: text/html" >> ${JMB_CGI_TMP}/http_${tsn}.header

local message=$(utf8_to_html "${@}")
source ${JMB_PATH}/inc/page_http_403.sh > ${JMB_CGI_TMP}/http_${tsn}.message

http_send

}

# Réponse HTTP JSON "OK" , pas de paramètre
function http_200_json {

echo "Status: 200 OK" > ${JMB_CGI_TMP}/http_${tsn}.header
echo "Content-Type: application/json; charset=utf-8" >> ${JMB_CGI_TMP}/http_${tsn}.header

message_200_json

http_send

}

# Réponse HTTP JSON "Forbidden", paramètre: message d'erreur
function http_403_json {

echo "Status: 403 Forbidden" > ${JMB_CGI_TMP}/http_${tsn}.header
echo "Content-Type: application/json; charset=utf-8" >> ${JMB_CGI_TMP}/http_${tsn}.header

message_403_json "${@}"

http_send

}

# Réponse HTTP iCal "OK", pas de paramètre
function http_200_ical {

echo "Status: 200 OK" > ${JMB_CGI_TMP}/http_${tsn}.header
echo "Content-Type: text/calendar; charset=utf-8" >> ${JMB_CGI_TMP}/http_${tsn}.header
echo "Content-disposition: inline; filename=\"events.ics\""

http_send

}

# Envoyer le contenu des fichiers temporaires au serveur Web
function http_send {

length=$(cat ${JMB_CGI_TMP}/http_${tsn}.message |wc -c)
echo "Content-Length: ${length}" >> ${JMB_CGI_TMP}/http_${tsn}.header
echo >> ${JMB_CGI_TMP}/http_${tsn}.header

cat ${JMB_CGI_TMP}/http_${tsn}.header >${JMB_CGI_TMP}/http_${tsn}.response
cat ${JMB_CGI_TMP}/http_${tsn}.message >> ${JMB_CGI_TMP}/http_${tsn}.response
cat ${JMB_CGI_TMP}/http_${tsn}.response

rm ${JMB_CGI_TMP}/http_${tsn}.header
rm ${JMB_CGI_TMP}/http_${tsn}.message
rm ${JMB_CGI_TMP}/http_${tsn}.response

exit 0

}

########################################################################
# Contenus JSON pour Jicofo -> OBSOLETE !! (auth via JWT / Prosody)

function message_200_json {
cat<<EOT > ${JMB_CGI_TMP}/http_${tsn}.message
{
 "name": "${name}",
 "owner": "${owner}",
 "start_time": "${start_time}",
 "duration": ${duration}
}
EOT
}

function message_403_json {
cat<<EOT > ${JMB_CGI_TMP}/http_${tsn}.message
{
  "message": "${@}"
}
EOT
}

########################################################################
# Jetons JWT

function jwt_gen_header {
cat<<EOT
{
	"typ": "JWT",
	"alg": "HS256"
}
EOT
}

function jwt_gen_payload {
cat<<EOT
{
	"context": {
		"user": {
			"id": "${auth_uid}",
			"name": "${auth_name}",
			"email": "${auth_mail}"
			}
		},
	"aud": "chat",
	"iss": "${JMB_JWT_ISS}",
	"sub": "${JMB_SERVER_NAME}",
	"room": "${room}",
	"nbf": ${nbf},
	"exp": ${exp}
}
EOT
}

function jwt_base64_encode {
	input=${1:-$(</dev/stdin)}
	# Use `tr` to URL encode the output from base64.
	printf '%s' "${input}" |base64 |tr -d '=' |tr '/+' '_-' |tr -d '\n'
}

function jwt_json {
	input=${1:-$(</dev/stdin)}
	printf '%s' "${input}" |jq -c .
}

function jwt_hmacsha256_sign {
	input=${1:-$(</dev/stdin)}
	printf '%s' "${input}" |openssl dgst -binary -sha256 -hmac "${JMB_JWT_SECRET}"
}

########################################################################
# Divers

# Décodage et extraction des données POST
function postdecode {

# Variables envoyées par Jicofo:
# ------------------------------
# name (nom de la conférence)
# owner (récupéré à partir des attributs Shibboleth)
# start_time (au format 2020-05-05T12:16:57.518Z+02)
# duration (toujours -1)

# Variables envoyés par le formulaire form_new.sh:
# ------------------------------------------------
# conf_tsn (timestamp de l'enregistrement en nanosecondes)
# conf_name (nom de la conférence, généré aléatoirement, hidden)
# conf_date (date au format YYYY-MM-JJ)
# conf_time (heure au format HH:MM)
# conf_duration (durée en minutes)
# conf_object (objet de la réunion)
# conf_guests (liste des adresses mail invitées)
# conf_moderators (adresses mail des modérateurs)

# Variables envoyés par le formulaire form_edit.sh:
# -------------------------------------------------
# conf_tsn (timestamp de l'enregistrement en nanosecondes)
# conf_name (nom de la conférence, généré aléatoirement, hidden)
# conf_date (date au format YYYY-MM-JJ)
# conf_time (heure au format HH:MM)
# conf_duration (durée en minutes)
# conf_object (objet de la réunion)
# conf_guests (liste des adresses mail invitées)
# old_conf_date (date d'origine de la conférence)
# old_conf_time (heure d'origine de la conférence)
# old_conf_guests (liste d'origine des invités)
# old_conf_moderators (adresses mail des modérateurs)

if [ "${REQUEST_METHOD}" = "POST" ]; then

	# Filtrage des données POST pour limiter le risque d'injection
	# On ne conserve que les variables et caractères autorisés

	# Interdire injection de commandes:
	# supprimer $ (%24)
	# remplacer ` (%60) par ' (%27)
	# remplacer " (%22) par ' (%27)

	cat\
	 |tr -d -c '[:alnum:]&=_%.\-\+'\
	 |sed 's/%24//g ; s/%60/%27/g ; s/%22/%27/g'\
	 |sed 's/&/\n/g ; s/%40/@/g ; s/%3A/:/g ; s/%2B/Z+/g'\
	 |egrep '^(name|owner|start_time|duration|conf_tsn|conf_name|conf_date|conf_time|conf_duration|conf_object|conf_moderators|conf_guests|old_conf_date|old_conf_time|old_conf_moderators|old_conf_guests)='\
	  > ${JMB_CGI_TMP}/post-data.${tsn}

	# Evaluation des données POST filtrées
	test -s ${JMB_CGI_TMP}/post-data.${tsn} && eval $(<${JMB_CGI_TMP}/post-data.${tsn})
	rm ${JMB_CGI_TMP}/post-data.${tsn}

	# Mise en forme liste mails invités
	if [ ! -z "${conf_guests}" ] ; then
		conf_guests=${conf_guests//%0D%0A/ }
		conf_guests=${conf_guests//+/ }
		conf_guests=${conf_guests//  /}
	fi

	if [ ! -z "${old_conf_guests}" ] ; then
		old_conf_guests=${old_conf_guests//%0D%0A/ }
		old_conf_guests=${old_conf_guests//+/ }
		old_conf_guests=${old_conf_guests//  /}
	fi

	# Mise en forme liste mails modérateurs
	if [ ! -z "${conf_moderators}" ] ; then
		conf_moderators=${conf_moderators//%0D%0A/ }
		conf_moderators=${conf_moderators//+/ }
		conf_moderators=${conf_moderators//  /}
	fi

	if [ ! -z "${old_conf_moderators}" ] ; then
		old_conf_moderators=${old_conf_moderators//%0D%0A/ }
		old_conf_moderators=${old_conf_moderators//+/ }
		old_conf_moderators=${old_conf_moderators//  /}
	fi

	# Décodage de l'objet de la réunion
	if [ ! -z "${conf_object}" ] ; then
		object=$(urldecode "${conf_object}")
	fi

fi

}

# Décodage et extraction des données GET
function getdecode {

# Filtrage des données GET pour limiter le risque d'injection
# On ne conserve que les variables et caractères autorisés

# Variables retournées par la fonction
# ------------------------------------
# query
# id
# room

echo "${QUERY_STRING}"\
 |tr -d -c '[:alnum:]&=_%.\-\+'\
 |sed 's/&.*//g'\
 |egrep '^(|list|new|edit|del|register_new|register_edit)$'\
  > ${JMB_CGI_TMP}/query.${tsn}
query=$(<${JMB_CGI_TMP}/query.${tsn})
rm ${JMB_CGI_TMP}/query.${tsn}

echo "${QUERY_STRING}"\
 |tr -d -c '[:alnum:]&=_%.\-\+'\
 |sed "s/^${query}&// ; s/&/\n/g"\
 |egrep '^(id|room)='\
  > ${JMB_CGI_TMP}/params.${tsn}
test -s ${JMB_CGI_TMP}/params.${tsn} && eval $(<${JMB_CGI_TMP}/params.${tsn})
rm ${JMB_CGI_TMP}/params.${tsn}

}

function urldecode {

local u="${1//+/ }"
printf '%b' "${u//%/\\x}" |iconv -f iso-8859-1 -t UTF-8

}

function urlencode {

local olc=${LC_COLLATE}
LC_COLLATE=C
    
local length="${#1}"
for (( i = 0; i < length; i++ )); do
	local c="${1:i:1}"
	case $c in
		[a-zA-Z0-9.~_-]) printf "$c" ;;
		*) printf '%%%02X' "'$c" ;;
	esac
done
    
LC_COLLATE=${olc}

}

function utf8_to_html {
# Convertir la chaine passée en argument (utf8)
# -> HTML

echo "${@}" |recode UTF-8..HTML_4.0

}

function utf8_to_mime {
# Convertir la chaine passée en argument (utf8) en mime/base64
# -> base 64 pour le sujet du mail

# https://web.maths.unsw.edu.au/~lafaye/CCM/courrier-electronique/mime.htm
# Le standard MIME propose le format suivant : 
# =?charset?encodage?resultat?=
# charset représente le jeu de caractère utilisé,
# encodage définit l'encodage souhaité avec deux valeurs possibles :
# Q pour quoted-printable
# B pour base64 
# resultat: texte encodé selon la méthode spécifiée. 
# Exemple en codage Quoted-Printable avec « Comment ça marche ? » comme sujet de message :
# Subject: Comment =?ISO-8859-1?Q?=E7a_marche_=3F?=

# "recode" ne fonctionne pas via CGI, faut pas chercher à comprendre ...
#local b64="$(echo -n "${@}" |recode UTF-8../Base64)"

local b64="$(echo -n "${@}" |base64)"
echo "=?UTF-8?B?${b64}?="

}

function set_is_editor {
# Vérifier si un utilisateur est autorisé à créer / éditer une réunion
# -> utilise le filtre définit dans JMB_LDAP_FILTER

$JMB_LDAPSEARCH "(&(uid=${auth_uid})(${JMB_LDAP_FILTER}))" uid |grep -q '^uid: '

if [ ${?} = 0 ] ; then

	is_editor=1

else

	is_editor=0

fi

}

function expand_list_subscribers {
# Remplacer les adresses mail de type liste par les abonnés de la liste

local mail mails list n

if [ -z "${JMB_LISTS_SUBSCRIBERS}" ] ; then
	echo ${@}
	return
fi

list=$(
	while [ "${1}" != "" ] ; do
		mail=${1}
		mails=$(egrep "^${mail}(@| )" ${JMB_LISTS_SUBSCRIBERS} |awk '{print $2}')
		if [ -z "${mails}" ] ; then
			echo ${mail}
		else
			echo "${mails}"
		fi
		shift
	done |sort |uniq |grep -v "^${auth_mail}$"
)

list=$(echo "${list}" |egrep "@.*\.")

echo ${list}

}

function get_meeting_infos {
# Récupérer toutes les infos d'une réunion planifiée
# Arguments: $1 -> identifiant de la réunion dans la DB ("${tsn}")
# Variables en retour:
# name
# object
# begin
# duration
# end
# owner
# guests (liste sur 1 seule ligne)
# moderators (liste sur 1 seule ligne)

local r

# Table "meetings"
r=$(sqlite3 -list ${JMB_DB} "SELECT meeting_name, meeting_object, meeting_begin, meeting_duration, meeting_end,meeting_create FROM meetings WHERE meeting_id='${1}';")
old_ifs="${IFS}" ; IFS="|"
r=(${r}) ; IFS="${old_ifs}"
name=${r[0]}
object=${r[1]}
begin=${r[2]}
duration=${r[3]}
end=${r[4]}
create=${r[5]}

# Table "attendees"
owner=$(sqlite3 ${JMB_DB} "SELECT attendee_email FROM attendees WHERE attendee_meeting_id='${1}' AND attendee_role='owner';")
guests=$(sqlite3 ${JMB_DB} "SELECT attendee_email FROM attendees WHERE attendee_meeting_id='${1}' AND attendee_role='guest';")
moderators=$(sqlite3 ${JMB_DB} "SELECT attendee_email FROM attendees WHERE attendee_meeting_id='${1}' AND attendee_role='moderator';")

# Passer la liste des modérateurs et invités sur une seule ligne
guests=(${guests}) ; guests=${guests[@]}
moderators=(${moderators}) ; moderators=${moderators[@]}

}

function gen_meeting_hash {
# Générer un hash de réunion
# Variable en retour:
# hash

hash=$(pwgen -s -0 16 1)

}

function get_meeting_hash {
# Récupérer le hash d'une réunion
# Arguments: $1 -> identifiant de la réunion dans la DB ("${tsn}")
#            $2 -> adresse mail du participant
#            $3 -> role du participant
# Variable en retour:
# hash

hash=$(sqlite3 ${JMB_DB} "\
	SELECT attendee_meeting_hash FROM attendees
	WHERE attendee_meeting_id='${1}' AND attendee_email='${2}' AND attendee_role='${3}';
")

}

function log {
echo "${@}" |logger -t jitsi-jmb
}
