#!/bin/bash

########################################################################
# FONCTIONS
########################################################################

########################################################################
# Réponses HTTP

# Réponse HTTP "OK", pas de paramètre
# Envoyer le contenu de ${JMB_CGI_TMP}/http_${tsn}.message
function http_200 {

echo "Status: 200 OK" > ${JMB_CGI_TMP}/http_${tsn}.header
if [ "${setcookie}" = "1" ] ; then
	echo "Set-Cookie: viajmb=1" >> ${JMB_CGI_TMP}/http_${tsn}.header
fi
echo "Content-Type: text/html" >> ${JMB_CGI_TMP}/http_${tsn}.header

http_send

}

# Réponse HTTP "Forbidden" retourne les arguments en HTML
# Envoyer le contenu de ${JMB_CGI_TMP}/http_${tsn}.header
function http_403 {

echo "Status: 403 Forbidden" > ${JMB_CGI_TMP}/http_${tsn}.header
echo "Content-Type: text/html" >> ${JMB_CGI_TMP}/http_${tsn}.header

local message=$(utf8_to_html "${@}")
local url_redirect="?list"
source ${JMB_PATH}/inc/page_http_403.sh > ${JMB_CGI_TMP}/http_${tsn}.message

http_send

}

# Réponse HTTP JSON "OK" , pas de paramètre
function http_200_json {

echo "Status: 200 OK" > ${JMB_CGI_TMP}/http_${tsn}.header
echo "Content-Type: application/json; charset=utf-8" >> ${JMB_CGI_TMP}/http_${tsn}.header

message_200_json

http_send

}

# Réponse HTTP JSON "Forbidden", paramètre: message d'erreur
function http_403_json {

echo "Status: 403 Forbidden" > ${JMB_CGI_TMP}/http_${tsn}.header
echo "Content-Type: application/json; charset=utf-8" >> ${JMB_CGI_TMP}/http_${tsn}.header

message_403_json "${@}"

http_send

}

# Réponse HTTP iCal "OK", pas de paramètre
function http_200_ical {

echo "Status: 200 OK" > ${JMB_CGI_TMP}/http_${tsn}.header
echo "Content-Type: text/calendar; charset=utf-8" >> ${JMB_CGI_TMP}/http_${tsn}.header
echo "Content-disposition: inline; filename=\"events.ics\""

http_send

}

# Envoyer le contenu des fichiers temporaires au serveur Web
function http_send {

length=$(cat ${JMB_CGI_TMP}/http_${tsn}.message |wc -c)
echo "Content-Length: ${length}" >> ${JMB_CGI_TMP}/http_${tsn}.header
echo >> ${JMB_CGI_TMP}/http_${tsn}.header

cat ${JMB_CGI_TMP}/http_${tsn}.header >${JMB_CGI_TMP}/http_${tsn}.response
cat ${JMB_CGI_TMP}/http_${tsn}.message >> ${JMB_CGI_TMP}/http_${tsn}.response
cat ${JMB_CGI_TMP}/http_${tsn}.response

rm ${JMB_CGI_TMP}/http_${tsn}.header
rm ${JMB_CGI_TMP}/http_${tsn}.message
rm ${JMB_CGI_TMP}/http_${tsn}.response

exit 0

}

########################################################################
# Contenus JSON pour Jicofo

function message_200_json {
cat<<EOT > ${JMB_CGI_TMP}/http_${tsn}.message
{
 "name": "${name}",
 "mail_owner": "${mail_owner}",
 "start_time": "${start_time}",
 "duration": ${duration}
}
EOT
}

function message_403_json {
cat<<EOT > ${JMB_CGI_TMP}/http_${tsn}.message
{
  "message": "${@}"
}
EOT
}

########################################################################
# Divers

# Décodage et extraction des données POST
function postdecode {

# Variables envoyées par Jicofo:
# ------------------------------
# name (nom de la conférence)
# mail_owner (récupéré à partir des attributs Shibboleth)
# start_time (au format 2020-05-05T12:16:57.518Z+02)
# duration (toujours -1)

# Variables envoyés par le formulaire form_new.sh:
# ------------------------------------------------
# conf_tsn (timestamp de l'enregistrement en nanosecondes)
# conf_name (nom de la conférence, généré aléatoirement, hidden)
# conf_date (date au format YYYY-MM-JJ)
# conf_time (heure au format HH:MM)
# conf_duration (durée en minutes)
# conf_object (objet de la réunion)
# conf_guests (liste des adresses mail invitées)

# Variables envoyés par le formulaire form_edit.sh:
# -------------------------------------------------
# conf_tsn (timestamp de l'enregistrement en nanosecondes)
# conf_name (nom de la conférence, généré aléatoirement, hidden)
# conf_date (date au format YYYY-MM-JJ)
# conf_time (heure au format HH:MM)
# conf_duration (durée en minutes)
# conf_object (objet de la réunion)
# conf_guests (liste des adresses mail invitées)
# old_conf_date (date d'origine de la conférence)
# old_conf_time (heure d'origine de la conférence)
# old_conf_guests (liste d'origine des invités)

if [ "${REQUEST_METHOD}" = "POST" ]; then

	# Filtrage des données POST pour limiter le risque d'injection
	# On ne conserve que les variables et caractères autorisés

	cat\
	 |tr -d -c '[:alnum:]&=_%.\-\+'\
	 |sed 's/&/\n/g ; s/%40/@/g ; s/%3A/:/g ; s/%2B/Z+/g'\
	 |egrep '^(name|mail_owner|start_time|duration|conf_tsn|conf_name|conf_date|conf_time|conf_duration|conf_object|conf_guests|old_conf_date|old_conf_time|old_conf_guests)='\
	  > ${JMB_CGI_TMP}/post-data.${tsn}

	# Evaluation des données POST filtrées
	test -s ${JMB_CGI_TMP}/post-data.${tsn} && eval $(<${JMB_CGI_TMP}/post-data.${tsn})
	rm ${JMB_CGI_TMP}/post-data.${tsn}

	# Mise en forme liste mails invités
	if [ ! -z "${conf_guests}" ] ; then
		conf_guests=${conf_guests//%0D%0A/ }
		conf_guests=${conf_guests//+/ }
		conf_guests=${conf_guests//  /}
	fi

	if [ ! -z "${old_conf_guests}" ] ; then
		old_conf_guests=${old_conf_guests//%0D%0A/ }
		old_conf_guests=${old_conf_guests//+/ }
		old_conf_guests=${old_conf_guests//  /}
	fi

	# Décodage de l'objet de la réunion
	if [ ! -z "${conf_object}" ] ; then
		object=$(urldecode "${conf_object}")
	fi

fi

}

# Décodage et extraction des données GET
function getdecode {

# Filtrage des données GET pour limiter le risque d'injection
# On ne conserve que les variables et caractères autorisés

# Variables retournées par la fonction
# ------------------------------------
# query
# id

echo "${QUERY_STRING}"\
 |tr -d -c '[:alnum:]&=_%.\-\+'\
 |sed 's/&.*//g'\
 |egrep '^(|list|new|edit|del|register_new|register_edit)$'\
  > ${JMB_CGI_TMP}/query.${tsn}
query=$(<${JMB_CGI_TMP}/query.${tsn})
rm ${JMB_CGI_TMP}/query.${tsn}

echo "${QUERY_STRING}"\
 |tr -d -c '[:alnum:]&=_%.\-\+'\
 |sed "s/^${query}&// ; s/&/\n/g"\
 |egrep '^(id)='\
  > ${JMB_CGI_TMP}/params.${tsn}
test -s ${JMB_CGI_TMP}/params.${tsn} && eval $(<${JMB_CGI_TMP}/params.${tsn})
rm ${JMB_CGI_TMP}/params.${tsn}

}

function urldecode {

local u="${1//+/ }"
printf '%b' "${u//%/\\x}" |iconv -f iso-8859-1 -t UTF-8

}

function urlencode {

old_lc_collate=$LC_COLLATE
LC_COLLATE=C
    
local length="${#1}"
for (( i = 0; i < length; i++ )); do
	local c="${1:i:1}"
	case $c in
		[a-zA-Z0-9.~_-]) printf "$c" ;;
		*) printf '%%%02X' "'$c" ;;
	esac
done
    
LC_COLLATE=$old_lc_collate

}

function utf8_to_html {
# Convertir la chaine passée en argument (utf8)
# -> HTML

echo "${@}" |recode UTF-8..HTML_4.0

}

function utf8_to_base64mail {
# Convertir la chaine passée en argument (utf8)
# -> base 64 pour le sujet du mail

local b64="$(echo -n "${@}" |recode UTF-8../Base64)"
echo "=?UTF-8?B?${b64}?="

}

function isAllowed {
# Vérifier si un utilisateur est autorisé à créer / éditer une réunion
# -> utilise le filtre définit dans JMB_LDAP_FILTER

$JMB_LDAPSEARCH "(&(mail=${HTTP_MAIL})(${JMB_LDAP_FILTER}))" uid |grep -q '^uid: '

if [ ${?} = 0 ] ; then

	is_allowed=1

else

	is_allowed=0

fi

}
